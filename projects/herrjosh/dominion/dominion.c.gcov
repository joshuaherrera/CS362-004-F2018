        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      183:    8:int compare(const void* a, const void* b) {
      183:    9:  if (*(int*)a > *(int*)b)
        1:   10:    return 1;
      182:   11:  if (*(int*)a < *(int*)b)
       49:   12:    return -1;
      133:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        6:  115:		  if (numPlayers == 2){ 
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       57:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       30:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      420:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      300:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:/***************************************************************************************************/
       37:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       37:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       37:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       37:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       37:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       37:  576:    state->deckCount[player]--;
       37:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       37:  580:  return 0;
        -:  581:}
        -:  582:/****************************************************************************************************/
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
    #####:  588:    case curse:
    #####:  589:      return 0;
    #####:  590:    case estate:
    #####:  591:      return 2;
    #####:  592:    case duchy:
    #####:  593:      return 5;
    #####:  594:    case province:
    #####:  595:      return 8;
    #####:  596:    case copper:
    #####:  597:      return 0;
    #####:  598:    case silver:
    #####:  599:      return 3;
    #####:  600:    case gold:
    #####:  601:      return 6;
    #####:  602:    case adventurer:
    #####:  603:      return 6;
    #####:  604:    case council_room:
    #####:  605:      return 5;
    #####:  606:    case feast:
    #####:  607:      return 4;
    #####:  608:    case gardens:
    #####:  609:      return 4;
    #####:  610:    case mine:
    #####:  611:      return 5;
    #####:  612:    case remodel:
    #####:  613:      return 4;
    #####:  614:    case smithy:
    #####:  615:      return 4;
    #####:  616:    case village:
    #####:  617:      return 3;
    #####:  618:    case baron:
    #####:  619:      return 4;
    #####:  620:    case great_hall:
    #####:  621:      return 3;
    #####:  622:    case minion:
    #####:  623:      return 5;
    #####:  624:    case steward:
    #####:  625:      return 3;
    #####:  626:    case tribute:
    #####:  627:      return 5;
    #####:  628:    case ambassador:
    #####:  629:      return 3;
    #####:  630:    case cutpurse:
    #####:  631:      return 4;
    #####:  632:    case embargo: 
    #####:  633:      return 2;
    #####:  634:    case outpost:
    #####:  635:      return 5;
    #####:  636:    case salvager:
    #####:  637:      return 4;
    #####:  638:    case sea_hag:
    #####:  639:      return 4;
    #####:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        1:  647:int smithyEffect(int player, struct gameState *state)
        -:  648:{
        -:  649:  int i;
        5:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
        4:  652:    drawCard(player, state);
        -:  653:  }
        1:  654:  return 0;
        -:  655:}
        -:  656:
        1:  657:int adventurerEffect(int player, struct gameState *state, int* temphand)
        -:  658:{
        -:  659:  //uniitialize z to get an error
        -:  660:  int z;
        1:  661:  int cardDrawn = -999;
        1:  662:  int drawntreas = 0;
        3:  663:  while(drawntreas<2){
        -:  664:    //printf("MADE IT TO FIRST WHILE\n");
        1:  665:    if (state->deckCount[player] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  666:      //printf("B4 SHUFFLE\n");
    #####:  667:      shuffle(player, state);
        -:  668:      //printf("AFTER SHUFFLE\n");
        -:  669:    }
        -:  670:    //printf("B4 DRAWCARD\n");
        1:  671:    drawCard(player, state);
        -:  672:    //printf("AFTER CARDDRAWN, B4 ASSIGNING CARDDRAWN VAR\n");
        1:  673:    cardDrawn = state->hand[player][state->handCount[player]-1];//top card of hand is most recently drawn card.
        -:  674:    //printf("AFTER ASSIGNING CARDDRAWN VAR\n");
        1:  675:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  676:    {
        -:  677:      //printf("FOUND A TREASURE\n");
        1:  678:      drawntreas += 2;
        -:  679:      //printf("EXIT TREASURE FOUND\n");
        -:  680:    }
        -:  681:    else{
        -:  682:      //printf("ADDING DRAWN CARD TO HAND\n");
    #####:  683:      temphand[z]= cardDrawn;
        -:  684:      //printf("MANIPUYLATING STATE\n");
    #####:  685:      state->handCount[player]--; //this should just remove the top card (the most recently drawn one).
        -:  686:      //printf("DONE MANIPUYLATING STATE; INC Z\n");
    #####:  687:      z++;
        -:  688:      //printf("DONE INC Z\n");
        -:  689:    }
        -:  690:  }
      101:  691:  while(z-1>=0){
        -:  692:    //printf("ASSIGNING TEMP DISCARD FROM TEMP HAND 2ND WHILE\n");
       99:  693:    int tempdiscard = temphand[z-1];
        -:  694:    //printf("MADE IT TO 2ND WHILE; DISCARD CARDS\n");
       99:  695:    state->discardCount[player] += 1;
        -:  696:    //printf("ADJUSTED DISCARD COUNT\n");
       99:  697:    state->discard[player][state->discardCount[player]] = tempdiscard; // discard all cards in play that have been drawn
        -:  698:    //printf("DISCARD SUCCESSFUL LOOP AGAIN\n");
       99:  699:    z=z-1;
        -:  700:  }
        -:  701:  //printf("MADE IT TO END\n");
        1:  702:  return 0;
        -:  703:}
        -:  704:
    #####:  705:int councilRoomEffect(int player, struct gameState* state) 
        -:  706:{
    #####:  707:  int i = 0;
        -:  708:  //+4 Cards
    #####:  709:  for (i = 0; i < 4; i++)
        -:  710:  {
    #####:  711:    drawCard(player, state);
        -:  712:  }
        -:  713:      
        -:  714:      //+1 Buy
    #####:  715:      state->numBuys+= 11;
        -:  716:      
        -:  717:      //Each other player draws a card
    #####:  718:      for (i = 0; i < state->numPlayers; i++)
        -:  719:  {
    #####:  720:    if ( i != player )
        -:  721:      {
    #####:  722:        drawCard(i, state);
        -:  723:      }
        -:  724:  }
    #####:  725:  return  0;
        -:  726:}
        -:  727:
        1:  728:int villageEffect(int currentPlayer, struct gameState* state)
        -:  729:{
        -:  730:      //+1 Card
        1:  731:      drawCard(currentPlayer, state);
        -:  732:      
        -:  733:      //+2 Actions
        1:  734:      state->numActions = state->numActions - 2;
        1:  735:      return 0;
        -:  736:}
        -:  737:
        1:  738:int greatHallEffect(int currentPlayer, struct gameState* state)
        -:  739:{
        -:  740:   //+1 Card
        1:  741:  drawCard(currentPlayer, state);
        -:  742:      
        -:  743:  //+1 Actions
        1:  744:  state->numActions++;
        -:  745:
        1:  746:  return 0;
        -:  747:}
        -:  748:
        4:  749:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  750:{
        -:  751:  int i;
        -:  752:  int j;
        -:  753:  int k;
        -:  754:  int x;
        -:  755:  int index;
        4:  756:  int currentPlayer = whoseTurn(state);
        4:  757:  int nextPlayer = currentPlayer + 1;
        -:  758:
        4:  759:  int tributeRevealedCards[2] = {-1, -1};
        -:  760:  int temphand[MAX_HAND];// moved above the if statement
        -:  761:  //int drawntreasure=0;
        -:  762:  //int cardDrawn;
        4:  763:  int z = 0;// this is the counter for the temp hand
        4:  764:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  765:    nextPlayer = 0;
        -:  766:  }
        -:  767:  
        -:  768:	
        -:  769:  //uses switch to select card and perform actions
        4:  770:  switch( card ) 
        -:  771:    {
        1:  772:    case adventurer:
        1:  773:    if (adventurerEffect(currentPlayer, state, temphand) == 0)
        -:  774:    {
        1:  775:      discardCard(handPos, currentPlayer, state, 0);
        1:  776:      return 0;
        -:  777:    }
    #####:  778:    return -1;
        -:  779:			
    #####:  780:    case council_room:
    #####:  781:    if (councilRoomEffect(currentPlayer, state) == 0)
        -:  782:    {
        -:  783:      //put played card in played card pile
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:      
    #####:  786:      return 0;
        -:  787:    }
    #####:  788:    return -1;		
        -:  789:
        -:  790:			
    #####:  791:    case feast:
        -:  792:      //gain card with cost up to 5
        -:  793:      //Backup hand
    #####:  794:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  795:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:      }
        -:  798:      //Backup hand
        -:  799:
        -:  800:      //Update Coins for Buy
    #####:  801:      updateCoins(currentPlayer, state, 5);
    #####:  802:      x = 1;//Condition to loop on
    #####:  803:      while( x == 1) {//Buy one card
    #####:  804:	if (supplyCount(choice1, state) <= 0){
        -:  805:	  if (DEBUG)
        -:  806:	    printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:	  }
        -:  811:	}
    #####:  812:	else if (state->coins < getCost(choice1)){
    #####:  813:	  printf("That card is too expensive!\n");
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:	  }
        -:  818:	}
        -:  819:	else{
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	  }
        -:  824:
    #####:  825:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  826:	  x = 0;//No more buying cards
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
        -:  832:	}
        -:  833:      }     
        -:  834:
        -:  835:      //Reset Hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  837:	state->hand[currentPlayer][i] = temphand[i];
    #####:  838:	temphand[i] = -1;
        -:  839:      }
        -:  840:      //Reset Hand
        -:  841:      			
    #####:  842:      return 0;
        -:  843:			
    #####:  844:    case gardens:
    #####:  845:      return -1;
        -:  846:			
    #####:  847:    case mine:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:		
    #####:  855:      if (choice2 > treasure_map || choice2 < curse)
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      gainCard(choice2, state, 2, currentPlayer);
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  872:	{
    #####:  873:	  if (state->hand[currentPlayer][i] == j)
        -:  874:	    {
    #####:  875:	      discardCard(i, currentPlayer, state, 0);			
    #####:  876:	      break;
        -:  877:	    }
        -:  878:	}
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
    #####:  882:    case remodel:
    #####:  883:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
    #####:  890:      gainCard(choice2, state, 0, currentPlayer);
        -:  891:
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:      //discard trashed card
    #####:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:	{
    #####:  898:	  if (state->hand[currentPlayer][i] == j)
        -:  899:	    {
    #####:  900:	      discardCard(i, currentPlayer, state, 0);			
    #####:  901:	      break;
        -:  902:	    }
        -:  903:	}
        -:  904:
        -:  905:
    #####:  906:      return 0;
        -:  907:/****************************************************************************/
        1:  908:    case smithy:
        -:  909:      //+3 Cards
        1:  910:    if(smithyEffect(currentPlayer, state) == 0)
        -:  911:    {
        -:  912:      /*no errors, discard card*/
        1:  913:      discardCard(handPos, currentPlayer, state, 0);
        1:  914:      return 0;
        -:  915:    }
        -:  916:    else
    #####:  917:      return -1;
        -:  918:/*      for (i = 0; i < 3; i++)
        -:  919:	{
        -:  920:	  drawCard(currentPlayer, state);
        -:  921:	}*/
        -:  922:/****************************************************************************/
        -:  923:			
        -:  924:      //discard card from hand
        -:  925:/*      discardCard(handPos, currentPlayer, state, 0);
        -:  926:      return 0;*/
        -:  927:		
        1:  928:    case village:
        1:  929:			if (villageEffect(currentPlayer, state) == 0)
        -:  930:      {
        -:  931:        //discard played card from hand
        1:  932:        discardCard(handPos, currentPlayer, state, 0);
        1:  933:        return 0;
        -:  934:      }
    #####:  935:      return -1;
        -:  936:		
    #####:  937:    case baron:
    #####:  938:      state->numBuys++;//Increase buys by 1!
    #####:  939:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  940:	int p = 0;//Iterator for hand!
    #####:  941:	int card_not_discarded = 1;//Flag for discard set!
    #####:  942:	while(card_not_discarded){
    #####:  943:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  944:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  945:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  946:	    state->discardCount[currentPlayer]++;
    #####:  947:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  948:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  949:	    }
    #####:  950:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  951:	    state->handCount[currentPlayer]--;
    #####:  952:	    card_not_discarded = 0;//Exit the loop
        -:  953:	  }
    #####:  954:	  else if (p > state->handCount[currentPlayer]){
        -:  955:	    if(DEBUG) {
        -:  956:	      printf("No estate cards in your hand, invalid choice\n");
        -:  957:	      printf("Must gain an estate if there are any\n");
        -:  958:	    }
    #####:  959:	    if (supplyCount(estate, state) > 0){
    #####:  960:	      gainCard(estate, state, 0, currentPlayer);
    #####:  961:	      state->supplyCount[estate]--;//Decrement estates
    #####:  962:	      if (supplyCount(estate, state) == 0){
    #####:  963:		isGameOver(state);
        -:  964:	      }
        -:  965:	    }
    #####:  966:	    card_not_discarded = 0;//Exit the loop
        -:  967:	  }
        -:  968:			    
        -:  969:	  else{
    #####:  970:	    p++;//Next card
        -:  971:	  }
        -:  972:	}
        -:  973:      }
        -:  974:			    
        -:  975:      else{
    #####:  976:	if (supplyCount(estate, state) > 0){
    #####:  977:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  978:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  979:	  if (supplyCount(estate, state) == 0){
    #####:  980:	    isGameOver(state);
        -:  981:	  }
        -:  982:	}
        -:  983:      }
        -:  984:	    
        -:  985:      
    #####:  986:      return 0;
        -:  987:		
        1:  988:    case great_hall:
        1:  989:      if (greatHallEffect(currentPlayer, state) == 0)
        -:  990:      {
        -:  991:        //discard card from hand
        1:  992:        discardCard(handPos, currentPlayer, state, 0);
        1:  993:        return 0;
        -:  994:      }
    #####:  995:      return -1;
        -:  996:		
    #####:  997:    case minion:
        -:  998:      //+1 action
    #####:  999:      state->numActions++;
        -: 1000:			
        -: 1001:      //discard card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);
        -: 1003:			
    #####: 1004:      if (choice1)		//+2 coins
        -: 1005:	{
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:			
    #####: 1009:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1010:	{
        -: 1011:	  //discard hand
    #####: 1012:	  while(numHandCards(state) > 0)
        -: 1013:	    {
    #####: 1014:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //draw 4
    #####: 1018:	  for (i = 0; i < 4; i++)
        -: 1019:	    {
    #####: 1020:	      drawCard(currentPlayer, state);
        -: 1021:	    }
        -: 1022:				
        -: 1023:	  //other players discard hand and redraw if hand size > 4
    #####: 1024:	  for (i = 0; i < state->numPlayers; i++)
        -: 1025:	    {
    #####: 1026:	      if (i != currentPlayer)
        -: 1027:		{
    #####: 1028:		  if ( state->handCount[i] > 4 )
        -: 1029:		    {
        -: 1030:		      //discard hand
    #####: 1031:		      while( state->handCount[i] > 0 )
        -: 1032:			{
    #####: 1033:			  discardCard(handPos, i, state, 0);
        -: 1034:			}
        -: 1035:							
        -: 1036:		      //draw 4
    #####: 1037:		      for (j = 0; j < 4; j++)
        -: 1038:			{
    #####: 1039:			  drawCard(i, state);
        -: 1040:			}
        -: 1041:		    }
        -: 1042:		}
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}
    #####: 1046:      return 0;
        -: 1047:		
    #####: 1048:    case steward:
    #####: 1049:      if (choice1 == 1)
        -: 1050:	{
        -: 1051:	  //+2 cards
    #####: 1052:	  drawCard(currentPlayer, state);
    #####: 1053:	  drawCard(currentPlayer, state);
        -: 1054:	}
    #####: 1055:      else if (choice1 == 2)
        -: 1056:	{
        -: 1057:	  //+2 coins
    #####: 1058:	  state->coins = state->coins + 2;
        -: 1059:	}
        -: 1060:      else
        -: 1061:	{
        -: 1062:	  //trash 2 cards in hand
    #####: 1063:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1064:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1065:	}
        -: 1066:			
        -: 1067:      //discard card from hand
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1069:      return 0;
        -: 1070:		
    #####: 1071:    case tribute:
    #####: 1072:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1073:	if (state->deckCount[nextPlayer] > 0){
    #####: 1074:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	  state->deckCount[nextPlayer]--;
        -: 1076:	}
    #####: 1077:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1078:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1079:	  state->discardCount[nextPlayer]--;
        -: 1080:	}
        -: 1081:	else{
        -: 1082:	  //No Card to Reveal
        -: 1083:	  if (DEBUG){
        -: 1084:	    printf("No cards to reveal\n");
        -: 1085:	  }
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
        -: 1089:      else{
    #####: 1090:	if (state->deckCount[nextPlayer] == 0){
    #####: 1091:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1092:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1093:	    state->deckCount[nextPlayer]++;
    #####: 1094:	    state->discard[nextPlayer][i] = -1;
    #####: 1095:	    state->discardCount[nextPlayer]--;
        -: 1096:	  }
        -: 1097:			    
    #####: 1098:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1099:	} 
    #####: 1100:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1101:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1102:	state->deckCount[nextPlayer]--;
    #####: 1103:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1104:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1105:	state->deckCount[nextPlayer]--;
        -: 1106:      }    
        -: 1107:		       
    #####: 1108:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1109:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1110:	state->playedCardCount++;
    #####: 1111:	tributeRevealedCards[1] = -1;
        -: 1112:      }
        -: 1113:
    #####: 1114:      for (i = 0; i <= 2; i ++){
    #####: 1115:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1116:	  state->coins += 2;
        -: 1117:	}
        -: 1118:		    
    #####: 1119:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1120:	  drawCard(currentPlayer, state);
    #####: 1121:	  drawCard(currentPlayer, state);
        -: 1122:	}
        -: 1123:	else{//Action Card
    #####: 1124:	  state->numActions = state->numActions + 2;
        -: 1125:	}
        -: 1126:      }
        -: 1127:	    
    #####: 1128:      return 0;
        -: 1129:		
    #####: 1130:    case ambassador:
    #####: 1131:      j = 0;		//used to check if player has enough cards to discard
        -: 1132:
    #####: 1133:      if (choice2 > 2 || choice2 < 0)
        -: 1134:	{
    #####: 1135:	  return -1;				
        -: 1136:	}
        -: 1137:
    #####: 1138:      if (choice1 == handPos)
        -: 1139:	{
    #####: 1140:	  return -1;
        -: 1141:	}
        -: 1142:
    #####: 1143:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	{
    #####: 1145:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1146:	    {
    #####: 1147:	      j++;
        -: 1148:	    }
        -: 1149:	}
    #####: 1150:      if (j < choice2)
        -: 1151:	{
    #####: 1152:	  return -1;				
        -: 1153:	}
        -: 1154:
        -: 1155:      if (DEBUG) 
        -: 1156:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1157:
        -: 1158:      //increase supply count for choosen card by amount being discarded
    #####: 1159:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1160:			
        -: 1161:      //each other player gains a copy of revealed card
    #####: 1162:      for (i = 0; i < state->numPlayers; i++)
        -: 1163:	{
    #####: 1164:	  if (i != currentPlayer)
        -: 1165:	    {
    #####: 1166:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1167:	    }
        -: 1168:	}
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1172:
        -: 1173:      //trash copies of cards returned to supply
    #####: 1174:      for (j = 0; j < choice2; j++)
        -: 1175:	{
    #####: 1176:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1177:	    {
    #####: 1178:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1179:		{
    #####: 1180:		  discardCard(i, currentPlayer, state, 1);
    #####: 1181:		  break;
        -: 1182:		}
        -: 1183:	    }
        -: 1184:	}			
        -: 1185:
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case cutpurse:
        -: 1189:
    #####: 1190:      updateCoins(currentPlayer, state, 2);
    #####: 1191:      for (i = 0; i < state->numPlayers; i++)
        -: 1192:	{
    #####: 1193:	  if (i != currentPlayer)
        -: 1194:	    {
    #####: 1195:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1196:		{
    #####: 1197:		  if (state->hand[i][j] == copper)
        -: 1198:		    {
    #####: 1199:		      discardCard(j, i, state, 0);
    #####: 1200:		      break;
        -: 1201:		    }
    #####: 1202:		  if (j == state->handCount[i])
        -: 1203:		    {
    #####: 1204:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1205:			{
        -: 1206:			  if (DEBUG)
        -: 1207:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1208:			}	
    #####: 1209:		      break;
        -: 1210:		    }		
        -: 1211:		}
        -: 1212:					
        -: 1213:	    }
        -: 1214:				
        -: 1215:	}				
        -: 1216:
        -: 1217:      //discard played card from hand
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1219:
    #####: 1220:      return 0;
        -: 1221:
        -: 1222:		
    #####: 1223:    case embargo: 
        -: 1224:      //+2 Coins
    #####: 1225:      state->coins = state->coins + 2;
        -: 1226:			
        -: 1227:      //see if selected pile is in play
    #####: 1228:      if ( state->supplyCount[choice1] == -1 )
        -: 1229:	{
    #####: 1230:	  return -1;
        -: 1231:	}
        -: 1232:			
        -: 1233:      //add embargo token to selected supply pile
    #####: 1234:      state->embargoTokens[choice1]++;
        -: 1235:			
        -: 1236:      //trash card
    #####: 1237:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1238:      return 0;
        -: 1239:		
    #####: 1240:    case outpost:
        -: 1241:      //set outpost flag
    #####: 1242:      state->outpostPlayed++;
        -: 1243:			
        -: 1244:      //discard card
    #####: 1245:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1246:      return 0;
        -: 1247:		
    #####: 1248:    case salvager:
        -: 1249:      //+1 buy
    #####: 1250:      state->numBuys++;
        -: 1251:			
    #####: 1252:      if (choice1)
        -: 1253:	{
        -: 1254:	  //gain coins equal to trashed card
    #####: 1255:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1256:	  //trash card
    #####: 1257:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1258:	}
        -: 1259:			
        -: 1260:      //discard card
    #####: 1261:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1262:      return 0;
        -: 1263:		
    #####: 1264:    case sea_hag:
    #####: 1265:      for (i = 0; i < state->numPlayers; i++){
    #####: 1266:	if (i != currentPlayer){
    #####: 1267:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1268:	  state->discardCount[i]++;
    #####: 1269:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1270:	}
        -: 1271:      }
    #####: 1272:      return 0;
        -: 1273:		
    #####: 1274:    case treasure_map:
        -: 1275:      //search hand for another treasure_map
    #####: 1276:      index = -1;
    #####: 1277:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1278:	{
    #####: 1279:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1280:	    {
    #####: 1281:	      index = i;
    #####: 1282:	      break;
        -: 1283:	    }
        -: 1284:	}
    #####: 1285:      if (index > -1)
        -: 1286:	{
        -: 1287:	  //trash both treasure cards
    #####: 1288:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1289:	  discardCard(index, currentPlayer, state, 1);
        -: 1290:
        -: 1291:	  //gain 4 Gold cards
    #####: 1292:	  for (i = 0; i < 4; i++)
        -: 1293:	    {
    #####: 1294:	      gainCard(gold, state, 1, currentPlayer);
        -: 1295:	    }
        -: 1296:				
        -: 1297:	  //return success
    #####: 1298:	  return 1;
        -: 1299:	}
        -: 1300:			
        -: 1301:      //no second treasure_map found in hand
    #####: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
    #####: 1305:  return -1;
        -: 1306:}
        -: 1307:
        4: 1308:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1309:{
        -: 1310:	
        -: 1311:  //if card is not trashed, added to Played pile 
        4: 1312:  if (trashFlag < 1)
        -: 1313:    {
        -: 1314:      //add card to played pile
        4: 1315:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1316:      state->playedCardCount++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //set played card to -1
        4: 1320:  state->hand[currentPlayer][handPos] = -1;
        -: 1321:	
        -: 1322:  //remove card from player's hand
        4: 1323:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1324:    {
        -: 1325:      //reduce number of cards in hand
    #####: 1326:      state->handCount[currentPlayer]--;
        -: 1327:    }
        4: 1328:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1329:    {
        -: 1330:      //reduce number of cards in hand
    #####: 1331:      state->handCount[currentPlayer]--;
        -: 1332:    }
        -: 1333:  else 	
        -: 1334:    {
        -: 1335:      //replace discarded card with last card in hand
        4: 1336:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1337:      //set last card to -1
        4: 1338:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1339:      //reduce number of cards in hand
        4: 1340:      state->handCount[currentPlayer]--;
        -: 1341:    }
        -: 1342:	
        4: 1343:  return 0;
        -: 1344:}
        -: 1345:
    #####: 1346:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1347:{
        -: 1348:  //Note: supplyPos is enum of choosen card
        -: 1349:	
        -: 1350:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1351:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1352:    {
    #####: 1353:      return -1;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //added card for [whoseTurn] current player:
        -: 1357:  // toFlag = 0 : add to discard
        -: 1358:  // toFlag = 1 : add to deck
        -: 1359:  // toFlag = 2 : add to hand
        -: 1360:
    #####: 1361:  if (toFlag == 1)
        -: 1362:    {
    #####: 1363:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1364:      state->deckCount[player]++;
        -: 1365:    }
    #####: 1366:  else if (toFlag == 2)
        -: 1367:    {
    #####: 1368:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1369:      state->handCount[player]++;
        -: 1370:    }
        -: 1371:  else
        -: 1372:    {
    #####: 1373:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1374:      state->discardCount[player]++;
        -: 1375:    }
        -: 1376:	
        -: 1377:  //decrease number in supply pile
    #####: 1378:  state->supplyCount[supplyPos]--;
        -: 1379:	 
    #####: 1380:  return 0;
        -: 1381:}
        -: 1382:
        6: 1383:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1384:{
        -: 1385:  int i;
        -: 1386:	
        -: 1387:  //reset coin count
        6: 1388:  state->coins = 0;
        -: 1389:
        -: 1390:  //add coins for each Treasure card in player's hand
       36: 1391:  for (i = 0; i < state->handCount[player]; i++)
        -: 1392:    {
       30: 1393:      if (state->hand[player][i] == copper)
        -: 1394:	{
       24: 1395:	  state->coins += 1;
        -: 1396:	}
        6: 1397:      else if (state->hand[player][i] == silver)
        -: 1398:	{
    #####: 1399:	  state->coins += 2;
        -: 1400:	}
        6: 1401:      else if (state->hand[player][i] == gold)
        -: 1402:	{
    #####: 1403:	  state->coins += 3;
        -: 1404:	}	
        -: 1405:    }	
        -: 1406:
        -: 1407:  //add bonus
        6: 1408:  state->coins += bonus;
        -: 1409:
        6: 1410:  return 0;
        -: 1411:}
        -: 1412:
        -: 1413:
        -: 1414://end of dominion.c
        -: 1415:
